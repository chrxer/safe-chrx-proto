from ptcx import BasePTC
from sourcetypes import cc
    
# match location after all first commetns
after_first_comments = rb'^(\s*(?://.*\n|/\*[^*]*\*+(?:[^/*][^*]*\*+)*/\s*\n?)+\s*)\n|^'

add: cc = b"""
// import added by chrx
#include "chrx/os_crypt_hook/os_crypt.h"
"""

encrypt: cc = b"""
bool OSCryptImpl::EncryptString(const std::string& plaintext, std::string* ciphertext){
    if (plaintext.empty()) {
        ciphertext->clear();
        return true;
    }

    return ChrxEncrypt(plaintext, *ciphertext);
}
"""

decrypt: cc = b"""
bool OSCryptImpl::DecryptString(const std::string& ciphertext, std::string* plaintext){
    if (ciphertext.empty()) {
        plaintext->clear();
        return true;
    }

    return ChrxDecrypt(*plaintext, ciphertext);
}
"""

class PTC(BasePTC):
    def patch(self):
        self.lang = "cpp" # ensure this is always treated as c++

        # add import
        self.insert(after_first_comments, lambda s: s + add)

        # replace encrypt & decrypt
        self.rplace_fn(encrypt)
        self.rplace_fn(decrypt)
